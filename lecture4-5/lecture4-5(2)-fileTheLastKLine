### 问题2.3：显示文件最后n行（`tail`命令实现）

---

#### **问题描述**
• **目标**：实现类似Unix命令`tail`的功能，显示文件的最后n行。
• **输入格式**：`tail [-n] filename`，其中：
  • `-n`：可选参数，指定显示的行数（默认n=10）。
  • `filename`：文件名。
• **输出要求**：按文件顺序输出最后n行，需处理非法参数或文件名。

---

#### **算法设计：循环链表法**
1. **核心思想**：  
   使用固定大小为n的**循环链表**动态维护文件的最新n行，避免存储整个文件。
   • 每次读取新行时，覆盖链表中最旧的行。
   • 最终遍历链表输出所有行。
**注意** ：链表节点的`line`字段需动态分配内存，避免内存泄漏, 需要释放旧行内存，新建读取行数大小的内存空间。
2. **步骤**：
   1. **初始化循环链表**：创建n个节点的空链表。
   2. **逐行读取文件**：
      ◦ 新行替换当前节点内容。
      ◦ 移动指针到下一节点（循环覆盖旧内容）。
   3. **输出结果**：遍历链表，按顺序输出所有行。

---

#### **代码实现**
```c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define DEFLINES 10    // 默认显示行数
#define MAXLEN 81      // 单行最大长度

// 链表节点结构
struct Node {
    char *line;        // 存储行内容
    struct Node *next; // 指向下一节点
};

int main(int argc, char *argv[]) {
    char curline[MAXLEN], *filename;
    int n = DEFLINES, i;
    struct Node *first, *ptr;  // 链表头指针和遍历指针
    FILE *fp;

    // 1. 解析命令行参数
    if (argc == 3 && argv[1][0] == '-') {  // 带行数参数
        n = atoi(argv[1] + 1);
        filename = argv[2];
    } else if (argc == 2) {               // 仅文件名
        filename = argv[1];
    } else {                              // 参数错误
        fprintf(stderr, "Usage: tail [-n] filename\n");
        return 1;
    }

    // 2. 打开文件
    if ((fp = fopen(filename, "r")) == NULL) {
        fprintf(stderr, "Can't open file: %s\n", filename);
        return -1;
    }

    // 3. 初始化循环链表
    first = ptr = (struct Node*)malloc(sizeof(struct Node));
    first->line = NULL;  // 初始化为空
    for (i = 1; i < n; i++) {
        ptr->next = (struct Node*)malloc(sizeof(struct Node));
        ptr = ptr->next;
        ptr->line = NULL;
    }
    ptr->next = first;  // 形成循环链表

    // 4. 读取文件并更新链表
    ptr = first;
    while (fgets(curline, MAXLEN, fp) != NULL) {
        if (ptr->line != NULL) 
            free(ptr->line);             // 释放旧行内存
        ptr->line = strdup(curline);     // 复制新行
        ptr = ptr->next;                 // 移动指针
    }

    // 5. 输出最后n行
    for (i = 0; i < n; i++) {
        if (ptr->line != NULL) 
            printf("%s", ptr->line);
        ptr = ptr->next;
    }

    // 6. 清理资源
    fclose(fp);
    struct Node *temp;
    for (i = 0; i < n; i++) {           // 释放链表内存
        temp = first;
        first = first->next;
        free(temp->line);
        free(temp);
    }
    return 0;
}
```

---

#### **关键代码解析**
1. **命令行解析**：
   • 处理`-n`参数，若未指定则使用默认值。
   • 错误处理：参数数量不符或文件无法打开。

2. **循环链表构建**：
   • 创建n个节点的循环链表，初始时所有节点的`line`字段为`NULL`。
   • 链表尾部节点的`next`指向头节点，形成闭环。

3. **动态更新链表**：
   • **每次读取新行时，若当前节点已有内容，先释放内存。**
   • 使用`strdup`复制新行内容（自动分配内存）。

---
